GobbletのAI

Gobbletのルール
駒は特大、大、中、小の４種類が3組
盤は4×4
プレイヤーは交互に手番がくる
初めは盤の上には駒がない
手番が来たら盤上の駒を動かすか、番外にある駒を動かすことができる
このとき、動かした駒を動かした先にある駒に被せることもできる
縦横斜めのいずれかの一列(4マス)を揃えることができたら勝利
下に駒がある駒を動かそうとして相手の駒が一列を揃った場合は負け
千日手:

後々やるかもしれないこと
特大、大、中、小のある場所で管理する
vector<int> : size 4 ぐらいまで簡単に圧縮できそう
∵(4*4+1)^(3*2)=17^6≒10^8

pair<int64,int64>にも盤面を圧縮できそう
(特大、大)と(中、小)

https://note.com/zinc0765/n/nc44032c3643f
にpairとsize2　vectorの速度比較アリ

vectorのiter2回 vs /と%2回ずつ
+
vector size 2 vs pair

queueにvectorはあまり入れたくない気持ちもアリ

幅優先探索はそれぞれの深さにおける局面数の話

Releaseビルド
ハッシュによるメモ化なし 幅優先探索
0ms depth:1, cnt:1, queue size:63
0ms depth:2, cnt:64, queue size:3935
16ms depth:3, cnt:3936, queue size:287583
1022ms depth:4, cnt:287584, queue size:20313135

深さ優先探索はそれぞれの深さまで探索した局面数の話

メモ化なし深さ優先探索
幅優先探索と比べてメモリ使用量が少なく速い
84ms depth:4
6871ms depth:5

局面数をカウントしたバージョン
7069ms depth:5, cnt:1608026161

手番も含めてメモ化有り深さ優先探索
574ms depth:5, cnt:45964157
