GobbletのAI

Gobbletのルール
駒は特大、大、中、小の４種類が3組
盤は4×4
プレイヤーは交互に手番がくる
初めは盤の上には駒がない
手番が来たら盤上の駒を動かすか、盤外にある駒を動かすことができる
ただし、盤外の駒の個数を特大、大、中、小それぞれc1, c2, c3, c4とすると、c1<=c2<=c3<=c4が常に成り立つ必要がある。
駒を動かすとき、駒をより小さい駒に被せることもできる
縦横斜めのいずれかの一列(4マス)を揃えることができたら勝利
駒を動かそうとしたら、相手の駒が下から出てきて一列を揃った場合は駒を動かした人が負け

幅優先探索はそれぞれの深さにおける局面数の話

Releaseビルド
ハッシュによるメモ化なし 幅優先探索
0ms depth:1, cnt:1, queue size:63
0ms depth:2, cnt:64, queue size:3935
16ms depth:3, cnt:3936, queue size:287583
1022ms depth:4, cnt:287584, queue size:20313135

深さ優先探索はそれぞれの深さまで探索した局面数の話

メモ化なし深さ優先探索
幅優先探索と比べてメモリ使用量が少なく速い
84ms depth:4
6871ms depth:5

局面数をカウントしたバージョン
7069ms depth:5, cnt:1608026161

手番も含めてメモ化有り深さ優先探索
574ms depth:5, cnt:45964157

局面の対称性やプレイヤーの対称性を含めたメモ化有り深さ優先探索(間違えていた。変なものを同一視してしまった。)
315ms depth:5, cnt:18886671
2107ms depth:6, cnt:111152153
54353ms depth:7, cnt:1686172361

check_statusも差分だけ調べるメモ化有り深さ優先探索
ビットボードを実装します。
ビットボードを使えば盤面をpair<long long,long long>で表現できる。

局面の対称性は無しのビットボードメモ化有り深さ優先探索
4015ms depth:5, cnt:231625732

局面の対称性やプレイヤーの対称性を含めたビットボードメモ化有り深さ優先探索
417ms depth:5, cnt:29295383
16057ms depth:6, cnt:523293940
(
depthをintにすると、
399ms depth:5, cnt:29295383
depthとcntをint&->intにすると、
345ms depth:5, cnt:0
)

持ち駒ルールを適用した, 局面の対称性やプレイヤーの対称性を含めたビットボードメモ化有り深さ優先探索
5ms depth:5, cnt:446978
153ms depth:6, cnt:8200742
5294ms depth:7, cnt:170683866
(若干の高速化
4940ms depth:7, cnt:170683866
)

局面の対称性やプレイヤーの対称性を含めたビットボードメモ化有り深さ優先探索 map version
264ms depth:5, cnt:29295383
10007ms depth:6, cnt:523293940

持ち駒ルールを適用した, 局面の対称性やプレイヤーの対称性を含めたビットボードメモ化有り深さ優先探索 map version
4ms depth:5, cnt:446978
115ms depth:6, cnt:8200742
2433ms depth:7, cnt:170683866
